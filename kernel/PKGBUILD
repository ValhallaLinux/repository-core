pkgbase=kernel
pkgname=('kernel' 'kernel-headers')
_kernelname=-VALHALLA
_basekernel=4.1
pkgver=${_basekernel}.12
pkgrel=1
arch=('i686' 'x86_64')
url="http://www.kernel.org/"
license=('GPL2')
makedepends=('cpio' 'bc' 'perl' 'lz4')
options=('!strip')
source=("https://www.kernel.org/pub/linux/kernel/v4.x/linux-${pkgver}.tar.xz"
        "kernel-i686-config"
        "kernel-x86_64-config"
        "CVE-2015-5156.patch"
        "CVE-2015-6937.patch")
sha256sums=('4b49b246b2b99404432fdaa3338a01ce84dcd05b9501aaa71b04d81ac6e13f61'
            'f4470a550c61d91e1b97d4aa01e7d7965c819a2ff048678e423b114050d4cd76'
            '353d128133247ea77c24b9abd32f3efa411bb9f39d959bf1fa5925d07e3c908b'
            '03d3a391d8bc898fdd8dbbc7a29d5af49d7cf64489b6d4048002c2f96ffcf55f'
            '8be6a2bdb407f4280ba5034312f07f423e9f1a9c37d68fc17109f14ce649f3ab')
prepare() {
    cd "${srcdir}/linux-${pkgver}"

    #patch cve's
    patch -Np1 "${srcdir}/CVE-2015-5156.patch"
    patch -Np1 "${srcdir}/CVE-2015-6937.patch"

    if [ "${CARCH}" = "x86_64" ]; then
      cat "${srcdir}/kernel-x86_64-config" > ./.config
    else
      cat "${srcdir}/kernel-i686-config" > ./.config
    fi

    if [ "${_kernelname}" != "" ]; then
      sed -i "s|CONFIG_LOCALVERSION=.*|CONFIG_LOCALVERSION=\"${_kernelname}\"|g" ./.config
      sed -i "s|CONFIG_LOCALVERSION_AUTO=.*|CONFIG_LOCALVERSION_AUTO=n|" ./.config
    fi

    # set extraversion to pkgrel
    sed -ri "s|^(EXTRAVERSION =).*|\1 -${pkgrel}|" Makefile

    # don't run depmod on 'make install'. We'll do this ourselves in packaging
    sed -i '2iexit 0' scripts/depmod.sh

    # normally not needed
    make clean

    # get kernel version
    make prepare

    # load configuration
    # Configure the kernel. Replace the line below with one of your choice.
    #make menuconfig # CLI menu for configuration
    #make nconfig # new CLI menu for configuration
    #make xconfig # X-based configuration
    #make oldconfig # using old config from previous kernel version
    # ... or manually edit .config

    # rewrite configuration
    yes "" | make config >/dev/null
}

package_kernel() {
    pkgdesc="The ${pkgbase/linux/Linux} kernel and modules"
    depends=('coreutils' 'linux-firmware' 'kmod' 'dracut')
    provides=("linux=${pkgver}")

    cd "${srcdir}/linux-${_basekernel}"

    KARCH=x86

    # get the kernel version
    _kernver="$(make LOCALVERSION= kernelrelease)"

    mkdir -p "${pkgdir}"/{lib/modules,lib/firmware,boot}
    make LOCALVERSION= INSTALL_MOD_PATH="${pkgdir}" modules_install
    cp arch/$KARCH/boot/bzImage "${pkgdir}/boot/vmlinuz-${pkgver}-${CARCH}"
    
    if [ "${CARCH}" = "x86_64" ]; then
      echo "${pkgver}-${pkgrel}-VALHALLA x64" > "${pkgdir}/boot/${pkgbase}-${CARCH}.kver"
    else
      echo "${pkgver}-${pkgrel}-VALHALLA x32" > "${pkgdir}/boot/${pkgbase}-${CARCH}.kver"
    fi
  
    # set correct depmod command for install
    cp -f "${startdir}/${install}" "${startdir}/${install}.pkg"
    true && install=${install}.pkg
    sed \
      -e "s/RELEASE=.*/RELEASE=${pkgver}-${pkgrel}/g" \
      -e "s/KERNEL_VERSION=.*/KERNEL_VERSION=${_kernver}/g" \
      -e "s/KERNEL_BASE=.*/KERNEL_BASE=${_basekernel}/g" \
      -e "s/BASEVER=.*/BASEVER=${_basever}/g" \
      -e "s/ARCH=.*/ARCH=${CARCH}/g" \
      -i "${startdir}/${install}"

    # remove build and source links
    rm -f "${pkgdir}"/lib/modules/${_kernver}/{source,build}
    # remove the firmware
    rm -rf "${pkgdir}/lib/firmware"
    # gzip -9 all modules to save 100MB of space
    find "${pkgdir}" -name '*.ko' -exec gzip -9 {} \;
    # make room for external modules
    ln -s "../extramodules-${_basekernel}${_kernelname:--VALHALLA}" "${pkgdir}/lib/modules/${_kernver}/extramodules"
    # add real version for building modules and running depmod from post_install/upgrade
    mkdir -p "${pkgdir}/lib/modules/extramodules-${_basekernel}${_kernelname:--VALHALLA}"
    echo "${_kernver}" > "${pkgdir}/lib/modules/extramodules-${_basekernel}${_kernelname:--VALHALLA}/version"

    # Now we call depmod...
    depmod -b "${pkgdir}" -F System.map "${_kernver}"
    
    # move module tree /lib -> /usr/lib
    mkdir -p "${pkgdir}/usr"
    mv "${pkgdir}/lib" "${pkgdir}/usr/"

    # add vmlinux
    install -D -m644 vmlinux "${pkgdir}/usr/lib/modules/${_kernver}/build/vmlinux"
}
package_kernel-headers() {
    pkgdesc="Header files and scripts for building modules for ${pkgbase/linux/Linux} kernel"
    provides=("kernel-headers=$pkgver")

    install -dm755 "${pkgdir}/usr/lib/modules/${pkgver}"

    cd "${srcdir}/linux-${_basekernel}"
    install -D -m644 Makefile \
      "${pkgdir}/usr/lib/modules/${pkgver}/build/Makefile"
    install -D -m644 kernel/Makefile \
      "${pkgdir}/usr/lib/modules/${pkgver}/build/kernel/Makefile"
    install -D -m644 .config \
      "${pkgdir}/usr/lib/modules/${pkgver}/build/.config"

    mkdir -p "${pkgdir}/usr/lib/modules/${pkgver}/build/include"

    for i in acpi asm-generic config crypto drm generated keys linux math-emu \
      media net pcmcia scsi sound trace uapi video xen; do
      cp -a include/${i} "${pkgdir}/usr/lib/modules/${pkgver}/build/include/"
    done

    # copy arch includes for external modules
    mkdir -p "${pkgdir}/usr/lib/modules/${pkgver}/build/arch/x86"
    cp -a arch/x86/include "${pkgdir}/usr/lib/modules/${pkgver}/build/arch/x86/"

    # copy files necessary for later builds, like nvidia and vmware
    cp Module.symvers "${pkgdir}/usr/lib/modules/${pkgver}/build"
    cp -a scripts "${pkgdir}/usr/lib/modules/${pkgver}/build"

    # fix permissions on scripts dir
    chmod og-w -R "${pkgdir}/usr/lib/modules/${pkgver}/build/scripts"
    mkdir -p "${pkgdir}/usr/lib/modules/${pkgver}/build/.tmp_versions"

    mkdir -p "${pkgdir}/usr/lib/modules/${pkgver}/build/arch/${KARCH}/kernel"

    cp arch/${KARCH}/Makefile "${pkgdir}/usr/lib/modules/${pkgver}/build/arch/${KARCH}/"

    if [ "${CARCH}" = "i686" ]; then
      cp arch/${KARCH}/Makefile_32.cpu "${pkgdir}/usr/lib/modules/${pkgver}/build/arch/${KARCH}/"
    fi

    cp arch/${KARCH}/kernel/asm-offsets.s "${pkgdir}/usr/lib/modules/${pkgver}/build/arch/${KARCH}/kernel/"

    # add docbook makefile
    install -D -m644 Documentation/DocBook/Makefile \
      "${pkgdir}/usr/lib/modules/${pkgver}/build/Documentation/DocBook/Makefile"

    # add dm headers
    mkdir -p "${pkgdir}/usr/lib/modules/${pkgver}/build/drivers/md"
    cp drivers/md/*.h "${pkgdir}/usr/lib/modules/${pkgver}/build/drivers/md"

    # add inotify.h
    mkdir -p "${pkgdir}/usr/lib/modules/${pkgver}/build/include/linux"
    cp include/linux/inotify.h "${pkgdir}/usr/lib/modules/${pkgver}/build/include/linux/"

    # add wireless headers
    mkdir -p "${pkgdir}/usr/lib/modules/${pkgver}/build/net/mac80211/"
    cp net/mac80211/*.h "${pkgdir}/usr/lib/modules/${pkgver}/build/net/mac80211/"

    # add dvb headers for external modules
    # in reference to:
    # http://bugs.archlinux.org/task/9912
    mkdir -p "${pkgdir}/usr/lib/modules/${pkgver}/build/drivers/media/dvb-core"
    cp drivers/media/dvb-core/*.h "${pkgdir}/usr/lib/modules/${pkgver}/build/drivers/media/dvb-core/"
    # and...
    # http://bugs.archlinux.org/task/11194
    mkdir -p "${pkgdir}/usr/lib/modules/${pkgver}/build/include/config/dvb/"
    cp include/config/dvb/*.h "${pkgdir}/usr/lib/modules/${pkgver}/build/include/config/dvb/"

    # add dvb headers for http://mcentral.de/hg/~mrec/em28xx-new
    # in reference to:
    # http://bugs.archlinux.org/task/13146
    mkdir -p "${pkgdir}/usr/lib/modules/${pkgver}/build/drivers/media/dvb-frontends/"
    cp drivers/media/dvb-frontends/lgdt330x.h "${pkgdir}/usr/lib/modules/${pkgver}/build/drivers/media/dvb-frontends/"
    mkdir -p "${pkgdir}/usr/lib/modules/${pkgver}/build/drivers/media/i2c/"
    cp drivers/media/i2c/msp3400-driver.h "${pkgdir}/usr/lib/modules/${pkgver}/build/drivers/media/i2c/"

    # add dvb headers
    # in reference to:
    # http://bugs.archlinux.org/task/20402
    mkdir -p "${pkgdir}/usr/lib/modules/${pkgver}/build/drivers/media/usb/dvb-usb"
    cp drivers/media/usb/dvb-usb/*.h "${pkgdir}/usr/lib/modules/${pkgver}/build/drivers/media/usb/dvb-usb/"
    mkdir -p "${pkgdir}/usr/lib/modules/${pkgver}/build/drivers/media/dvb-frontends"
    cp drivers/media/dvb-frontends/*.h "${pkgdir}/usr/lib/modules/${pkgver}/build/drivers/media/dvb-frontends/"
    mkdir -p "${pkgdir}/usr/lib/modules/${pkgver}/build/drivers/media/tuners"
    cp drivers/media/tuners/*.h "${pkgdir}/usr/lib/modules/${pkgver}/build/drivers/media/tuners/"

    # add xfs and shmem for aufs building
    mkdir -p "${pkgdir}/usr/lib/modules/${pkgver}/build/fs/xfs/libxfs"
    mkdir -p "${pkgdir}/usr/lib/modules/${pkgver}/build/mm"
    cp fs/xfs/libxfs/xfs_sb.h "${pkgdir}/usr/lib/modules/${pkgver}/build/fs/xfs/libxfs/xfs_sb.h"

    # copy in Kconfig files
    for i in $(find . -name "Kconfig*"); do
      mkdir -p "${pkgdir}"/usr/lib/modules/${pkgver}/build/`echo ${i} | sed 's|/Kconfig.*||'`
      cp ${i} "${pkgdir}/usr/lib/modules/${pkgver}/build/${i}"
    done

    chown -R root.root "${pkgdir}/usr/lib/modules/${pkgver}/build"
    find "${pkgdir}/usr/lib/modules/${pkgver}/build" -type d -exec chmod 755 {} \;

    # strip scripts directory
    find "${pkgdir}/usr/lib/modules/${pkgver}/build/scripts" -type f -perm -u+w 2>/dev/null | while read binary ; do
      case "$(file -bi "${binary}")" in
        *application/x-sharedlib*) # Libraries (.so)
          /usr/bin/strip ${STRIP_SHARED} "${binary}";;
        *application/x-archive*) # Libraries (.a)
          /usr/bin/strip ${STRIP_STATIC} "${binary}";;
        *application/x-executable*) # Binaries
          /usr/bin/strip ${STRIP_BINARIES} "${binary}";;
      esac
    done

    # remove unneeded architectures
    rm -rf "${pkgdir}"/usr/lib/modules/${pkgver}/build/arch/{alpha,arc,arm,arm26,arm64,avr32,blackfin,c6x,cris,frv,h8300,hexagon,ia64,m32r,m68k,m68knommu,metag,mips,microblaze,mn10300,openrisc,parisc,powerpc,ppc,s390,score,sh,sh64,sparc,sparc64,tile,unicore32,um,v850,xtensa}
}

    
